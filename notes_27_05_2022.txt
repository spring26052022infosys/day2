Q Why do we need Maven project?
A Maven is chiefly used for Java-based projects, helping to download dependencies, which refers to the libraries or JAR files. The tool helps get the right JAR files for each project as there may be different versions of separate packages.
-------------------------------------------------------------------------------------------------------
Q What is POM.xml file?
A What is a POM? A Project Object Model or POM is the fundamental unit of work in Maven. It is an XML file that contains information about the project and configuration details used by Maven to build the project. It contains default values for most projects.
--------------------------------------------------------------------------------------------------------
Q I am not able to get the steps for creating a maven project in eclipse. Please help.
A https://www.studytonight.com/spring-framework/spring-maven-project
--------------------------------------------------------------------------------------------------------------
Q Should I learn Spring Framework or directly Spring boot?
A Spring is a widely used J2EE framework. Spring helps you to solve almost any enterprise problem but for that, you have to set up and configure everything manually.

On another side, spring boot provides almost all configuration and set up automatically without doing it manually. As a programmer, our main aim is to make focus on business logic rather than to do manual configuration. Spring takes a lot of time to do the manual configuration from the programmer and eventually the programmer gets loss the focus on its main objective which is to handle/create business logic. Spring boot solves this issue providing by its auto-configuration functionality. And this is the reason for most of the developers to select spring boot over spring.

So it is the choice of directly starting with Spring boot rather than starting with Spring Framework.
But knowledge of both will help you in your future projects and you have a choice of selecting from Spring
or choosing Spring Boot project of Spring.
------------------------------------------------------------------------------------------------------------
Q What is IOC container in Spring?
The Spring container is at the core of the Spring Framework. The container will create the objects, wire them together, configure them, and manage their complete life cycle from creation till destruction. The Spring container uses DI to manage the components that make up an application. These objects are called Spring Beans.

The container gets its instructions on what objects to instantiate, configure, and assemble by reading the configuration metadata provided. The configuration metadata can be represented either by XML, Java annotations, or Java code. 
--------------------------------------------------------------------------------------------------
Q What is the use of @Configuration?
A One of the most important annotations in spring is @Configuration annotation which indicates that the class has @Bean definition methods. So Spring container can process the class and generate Spring Beans to be used in the application. This annotation is part of the spring core framework. 
-------------------------------------------------------------------------------------------------------
Q What is the use of @Bean? 
A One of the most important annotations in spring is the @Bean annotation which is applied on a method to specify that it returns a bean to be managed by Spring context. Spring Bean annotation is usually declared in Configuration classes methods. This annotation is also a part of the spring core framework.

https://www.geeksforgeeks.org/spring-bean-annotation-with-example/
-------------------------------------------------------------------------------------------------------------

  public class Chinese{


  }

  public class SouthIndian{


  }


  public class Mom {
      Chinese ch=new Chinese();

  
 

  }
Note: above code is tightly coupled as with the change in plan for the food we have to change the reference
and object both. 
------------------------------------------------------------------------------------------------------------

 interface Food{


 }


  public class Chinese implements Food{


  }

  public class SouthIndian implements Food{


  }


  public class Mom {
      Food food=new SouthIndian();

  
 

  }
[Note: In this case we made the reference variable common for both the type of Food items]

-------------------------------------------------------------------------------------------
interface Food{

    void prepareFood();
 }


  public class Chinese implements Food{
    
    public void prepareFood(){
    System.out.println("I love chinese food");
    }

  }

  public class SouthIndian implements Food{
    public void prepareFood(){
    System.out.println("");
   }
    

  }


  public class Mom {
      Food food; 

     public Mom(Food food){
      this.food=food;


  }

 public class Main{
    public static void main(String args[]){
     Food food=null;
     Scanner scanner=new Scanner(System.in);
     System.out.println("Enter your choice");
     int ch=scanner.nextInt();
     switch(ch){
     case 1 : food=new SouthIndian();
              food.prepareFood(); 
              break;
     case 2 : food=new Chinese();
              food.prepareFood();
              break;
     default : System.out.println("Your option is wrong");
    }
  }
}

[ In the above code though we were able to achieve loosely coupled code but it is partial. 
  So here Spring framework comes in rescue as Spring framework will inject object through the 
  technique of Dependency Injection. DI mean the object will be created and inject in the code during
  the runtime and in this way we achieve inversion of control (IOC) as the code which requires the
  objects dont create the objects it is created by an external entity which is called IOC container.
  We have two IOC container
  * BeanFactory
  * ApplicationContext
  Both are interface. ApplicationContext is much advanced and it supports more features which helps 
  in developing Enterprise application.
  As we cannot create an object of interface as they dont have the implementations of abstract method.
  We need to create an object of the class which is implementing ApplicationContext.
 
public class Hello{
  private String name;
 
  public Hello(){
     name="Ravi";
  }
  public void message(){
   System.out.println("Hello "+name);
  }
 
 }
 
  /Hello hello=new Hello();

 @Configuration 
 public class ApplicationConfiguration{

  @Bean(name="greet")
  public Hello disp(){
     return new Hello();
  

  }

 }
public class Application{

  public static void main(String args[]){

ApplicationContext context=new AnnotationConfigApplicationContext(ApplicationConfiguration.class);
      Hello hello=(Hello)context.getBean("greet");
      hello.message();                                    
}
}

---------------------------------------------------------------------------------------------------------------
package com.infosys.bean;
  
@Component 
  public class Hello{
  private String name;
 
  public Hello(){
     name="Ravi";
  }
  public void message(){
   System.out.println("Hello "+name);
  }
 
 }
 


 @Configuration 
 @ComponentScan(basePackages = "com.infosys.bean") 
 public class ApplicationConfiguration{
  }

 }
----------------------------------------------------------------------------------------------------------

public class Name {
private String firstName;
private String middleName;
private String lastName;
public String getFirstName() {
	return firstName;
}
public void setFirstName(String firstName) {
	this.firstName = firstName;
}
public String getMiddleName() {
	return middleName;
}
public void setMiddleName(String middleName) {
	this.middleName = middleName;
}
public String getLastName() {
	return lastName;
}
public void setLastName(String lastName) {
	this.lastName = lastName;
}

// setters/getters method
}


public class Student {

  private int roll;
  private Name name;
 // setters/getters method  
public int getRoll() {
	return roll;
}
public void setRoll(int roll) {
	this.roll = roll;
}
public Name getName() {
	return name;
}
public void setName(Name name) {
	this.name = name;
}

}


public class Main {
   public static void main(String args[]){
    Name name=new Name();
    name.setFirstName("Ravi");
    name.setMiddleName("Kumar");
    name.setLastName("Sharma");
    Student student=new Student();
    student.setRoll(1);
   // student.setName(name);
    System.out.println(student.getRoll());
    name=student.getName();
    System.out.println(name);  //null
    System.out.println(name.getFirstName());  // NullPointerException
    System.out.println(name.getMiddleName());
    System.out.println(name.getLastName());

  }
}





-----------------------------------------------------------------------------------------------------------
package com.infosys.demo.autowire.bean;

import org.springframework.stereotype.Component;

@Component
public class Name {
private String firstName;
private String middleName;
private String lastName;
public String getFirstName() {
	return firstName;
}
public void setFirstName(String firstName) {
	this.firstName = firstName;
}
public String getMiddleName() {
	return middleName;
}
public void setMiddleName(String middleName) {
	this.middleName = middleName;
}
public String getLastName() {
	return lastName;
}
public void setLastName(String lastName) {
	this.lastName = lastName;
}

// setters/getters method
}



package com.infosys.demo.autowire.bean;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component(value="student")
public class Student {

  private int roll;
  @Autowired
  private Name name;
 // setters/getters method  
public int getRoll() {
	return roll;
}
public void setRoll(int roll) {
	this.roll = roll;
}
public Name getName() {
	return name;
}
public void setName(Name name) {
	this.name = name;
}

}



package com.infosys.demo.autowire.configure;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(basePackages="com.infosys.demo.autowire.bean")
public class ApplicationConfiguration {

}
------------------------------------------------------------------------------------------------------------

package com.infosys.demo.autowire.main;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import com.infosys.demo.autowire.bean.Name;
import com.infosys.demo.autowire.bean.Student;
import com.infosys.demo.autowire.configure.ApplicationConfiguration;

public class Main{

    public static void main(String args[]) {
     ApplicationContext context=new AnnotationConfigApplicationContext(ApplicationConfiguration.class);
         Student student=(Student)context.getBean("student");  
                   student.setRoll(1);
         /* Name name=(Name)context.getBean("name");
            name.setFirstName("Ravi");
            name.setMiddleName("kumar");
            name.setLastName("Sharma");
            student.setName(name);
          */ 
                   Name name= student.getName();    
                   System.out.println(name);  
                   name.setFirstName("Ravi");
                   name.setMiddleName("Kumar");
                   name.setLastName("Sharma");
                   student.setName(name);
                   name=student.getName();
                   System.out.println(name.getFirstName());
                

    }
 }

------------------------------------------------------------------------------------------------------
We have a class called Paper and paper is having a paragraph. 

package com.infosys.practice;
public class Paragraph {}
package com.infosys.practice;
public class Paper {
  private Paragraph para;
}
package com.infosys.practice;
public class ApplicationConfiguration{

}
package com.infosys.practice;
  public class Main {
    public static void main(String args[]){
    // 1) Get the IOC container object
    // 2) Get the reference of the bean for the Paper class
    // 3) With the reference of the paper bean get the reference of bean for the Paragraph class
    // 4) set the paragraph object of Paper class with the line "I am learning Spring and it is interesting". 
    // 5) get the paragraph object from Paper class and display the content as "I am learning Spring and it is interesting".
    }
  }

--------------------------------------------------------------------------------------------------------------- 

public class Paragraph{
   private String content;

   //setter/getters
   public void setContent(String content){
    this.content=content;
   }

   public String getContent(){
    return content;
   }
}

public class Paper {
  private Paragraph para;
   // setter/getters

  public void setPara(Paragraph para){
   this.para=para;
  }

  public Paragraph getPara(){
   return para;
  }    
}


public class Main2 {
   public static void main(String args[]) {
     Paragraph para=new Paragraph();
     String str="I am learning Spring and it is interesting";
     para.setContent(str);
     Paper paper=new Paper();
     paper.setParagraph(para);
     Paragraph paraToRead=paper.getPara();
     String strRead=paraToRead.getContent();
     System.out.println(strRead);
    }
 }
---------------------------------------------------------------------------------------------------------------
An Employee is having Address.

public class Address{
  private int hno;
  private String streetName;
  private String cityName;
  setters/getters
}


public class Employee{
  private int id;
  private String name;
  private Address address;
  setters/getters
}

-----------------------------------------------------------------------------------
1) Create a maven project.
2) update pom.xml with dependency(spring context).
3) creating the classes.
  
  package com.infosys.demo;
 
  
 


